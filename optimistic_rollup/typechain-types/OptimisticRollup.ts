/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace OptimisticRollup {
  export type RollupBlockStruct = {
    stateRoot: BytesLike;
    txRoot: BytesLike;
    blockNumber: BigNumberish;
    timestamp: BigNumberish;
    operator: AddressLike;
    challenged: boolean;
    finalized: boolean;
  };

  export type RollupBlockStructOutput = [
    stateRoot: string,
    txRoot: string,
    blockNumber: bigint,
    timestamp: bigint,
    operator: string,
    challenged: boolean,
    finalized: boolean
  ] & {
    stateRoot: string;
    txRoot: string;
    blockNumber: bigint;
    timestamp: bigint;
    operator: string;
    challenged: boolean;
    finalized: boolean;
  };

  export type WithdrawalRequestStruct = {
    user: AddressLike;
    amount: BigNumberish;
    rollupBlock: BigNumberish;
    processed: boolean;
  };

  export type WithdrawalRequestStructOutput = [
    user: string,
    amount: bigint,
    rollupBlock: bigint,
    processed: boolean
  ] & { user: string; amount: bigint; rollupBlock: bigint; processed: boolean };
}

export interface OptimisticRollupInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CHALLENGE_PERIOD"
      | "OPERATOR_BOND"
      | "accounts"
      | "canChallenge"
      | "canFinalize"
      | "canProcessWithdrawal"
      | "challengeBlock"
      | "currentStateRoot"
      | "deposit"
      | "finalizeBlock"
      | "getBalance"
      | "getCurrentState"
      | "getOperatorBond"
      | "getRollupBlock"
      | "getWithdrawalRequest"
      | "operator_bonds"
      | "processWithdrawal"
      | "requestWithdrawal"
      | "rollupBlockNumber"
      | "rollup_blocks"
      | "submitRollupBlock"
      | "totalValueLocked"
      | "withdrawal_requests"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BlockFinalized"
      | "Challenge"
      | "Deposit"
      | "RollupBlockSubmitted"
      | "WithdrawalProcessed"
      | "WithdrawalRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CHALLENGE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_BOND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canChallenge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canFinalize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canProcessWithdrawal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "challengeBlock",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentStateRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalizeBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorBond",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRollupBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalRequest",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operator_bonds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processWithdrawal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rollupBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rollup_blocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitRollupBlock",
    values: [BytesLike, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalValueLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawal_requests",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CHALLENGE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_BOND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canFinalize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canProcessWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentStateRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRollupBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operator_bonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollupBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollup_blocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitRollupBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawal_requests",
    data: BytesLike
  ): Result;
}

export namespace BlockFinalizedEvent {
  export type InputTuple = [blockNumber: BigNumberish];
  export type OutputTuple = [blockNumber: bigint];
  export interface OutputObject {
    blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChallengeEvent {
  export type InputTuple = [blockNumber: BigNumberish, challenger: AddressLike];
  export type OutputTuple = [blockNumber: bigint, challenger: string];
  export interface OutputObject {
    blockNumber: bigint;
    challenger: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RollupBlockSubmittedEvent {
  export type InputTuple = [
    blockNumber: BigNumberish,
    stateRoot: BytesLike,
    txRoot: BytesLike,
    operator: AddressLike
  ];
  export type OutputTuple = [
    blockNumber: bigint,
    stateRoot: string,
    txRoot: string,
    operator: string
  ];
  export interface OutputObject {
    blockNumber: bigint;
    stateRoot: string;
    txRoot: string;
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalProcessedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalRequestedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    requestId: BytesLike
  ];
  export type OutputTuple = [user: string, amount: bigint, requestId: string];
  export interface OutputObject {
    user: string;
    amount: bigint;
    requestId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OptimisticRollup extends BaseContract {
  connect(runner?: ContractRunner | null): OptimisticRollup;
  waitForDeployment(): Promise<this>;

  interface: OptimisticRollupInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CHALLENGE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  OPERATOR_BOND: TypedContractMethod<[], [bigint], "view">;

  accounts: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { balance: bigint; nonce: bigint }],
    "view"
  >;

  canChallenge: TypedContractMethod<
    [blockNum: BigNumberish],
    [boolean],
    "view"
  >;

  canFinalize: TypedContractMethod<[blockNum: BigNumberish], [boolean], "view">;

  canProcessWithdrawal: TypedContractMethod<
    [requestID: BytesLike],
    [boolean],
    "view"
  >;

  challengeBlock: TypedContractMethod<
    [blockNum: BigNumberish, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  currentStateRoot: TypedContractMethod<[], [string], "view">;

  deposit: TypedContractMethod<[], [void], "payable">;

  finalizeBlock: TypedContractMethod<
    [blockNum: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBalance: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getCurrentState: TypedContractMethod<
    [],
    [[string, bigint] & { stateRoot: string; blockNum: bigint }],
    "view"
  >;

  getOperatorBond: TypedContractMethod<
    [operator: AddressLike],
    [bigint],
    "view"
  >;

  getRollupBlock: TypedContractMethod<
    [blockNum: BigNumberish],
    [OptimisticRollup.RollupBlockStructOutput],
    "view"
  >;

  getWithdrawalRequest: TypedContractMethod<
    [requestId: BytesLike],
    [OptimisticRollup.WithdrawalRequestStructOutput],
    "view"
  >;

  operator_bonds: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  processWithdrawal: TypedContractMethod<
    [requestID: BytesLike],
    [void],
    "nonpayable"
  >;

  requestWithdrawal: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  rollupBlockNumber: TypedContractMethod<[], [bigint], "view">;

  rollup_blocks: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, string, boolean, boolean] & {
        stateRoot: string;
        txRoot: string;
        blockNumber: bigint;
        timestamp: bigint;
        operator: string;
        challenged: boolean;
        finalized: boolean;
      }
    ],
    "view"
  >;

  submitRollupBlock: TypedContractMethod<
    [newStateRoot: BytesLike, txRoot: BytesLike, txs: BytesLike[]],
    [void],
    "payable"
  >;

  totalValueLocked: TypedContractMethod<[], [bigint], "view">;

  withdrawal_requests: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, boolean] & {
        user: string;
        amount: bigint;
        rollupBlock: bigint;
        processed: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CHALLENGE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_BOND"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "accounts"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { balance: bigint; nonce: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "canChallenge"
  ): TypedContractMethod<[blockNum: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "canFinalize"
  ): TypedContractMethod<[blockNum: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "canProcessWithdrawal"
  ): TypedContractMethod<[requestID: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "challengeBlock"
  ): TypedContractMethod<
    [blockNum: BigNumberish, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentStateRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "finalizeBlock"
  ): TypedContractMethod<[blockNum: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentState"
  ): TypedContractMethod<
    [],
    [[string, bigint] & { stateRoot: string; blockNum: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOperatorBond"
  ): TypedContractMethod<[operator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRollupBlock"
  ): TypedContractMethod<
    [blockNum: BigNumberish],
    [OptimisticRollup.RollupBlockStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWithdrawalRequest"
  ): TypedContractMethod<
    [requestId: BytesLike],
    [OptimisticRollup.WithdrawalRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "operator_bonds"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "processWithdrawal"
  ): TypedContractMethod<[requestID: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestWithdrawal"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rollupBlockNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rollup_blocks"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, string, boolean, boolean] & {
        stateRoot: string;
        txRoot: string;
        blockNumber: bigint;
        timestamp: bigint;
        operator: string;
        challenged: boolean;
        finalized: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitRollupBlock"
  ): TypedContractMethod<
    [newStateRoot: BytesLike, txRoot: BytesLike, txs: BytesLike[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "totalValueLocked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawal_requests"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, boolean] & {
        user: string;
        amount: bigint;
        rollupBlock: bigint;
        processed: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "BlockFinalized"
  ): TypedContractEvent<
    BlockFinalizedEvent.InputTuple,
    BlockFinalizedEvent.OutputTuple,
    BlockFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "Challenge"
  ): TypedContractEvent<
    ChallengeEvent.InputTuple,
    ChallengeEvent.OutputTuple,
    ChallengeEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "RollupBlockSubmitted"
  ): TypedContractEvent<
    RollupBlockSubmittedEvent.InputTuple,
    RollupBlockSubmittedEvent.OutputTuple,
    RollupBlockSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalProcessed"
  ): TypedContractEvent<
    WithdrawalProcessedEvent.InputTuple,
    WithdrawalProcessedEvent.OutputTuple,
    WithdrawalProcessedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalRequested"
  ): TypedContractEvent<
    WithdrawalRequestedEvent.InputTuple,
    WithdrawalRequestedEvent.OutputTuple,
    WithdrawalRequestedEvent.OutputObject
  >;

  filters: {
    "BlockFinalized(uint256)": TypedContractEvent<
      BlockFinalizedEvent.InputTuple,
      BlockFinalizedEvent.OutputTuple,
      BlockFinalizedEvent.OutputObject
    >;
    BlockFinalized: TypedContractEvent<
      BlockFinalizedEvent.InputTuple,
      BlockFinalizedEvent.OutputTuple,
      BlockFinalizedEvent.OutputObject
    >;

    "Challenge(uint256,address)": TypedContractEvent<
      ChallengeEvent.InputTuple,
      ChallengeEvent.OutputTuple,
      ChallengeEvent.OutputObject
    >;
    Challenge: TypedContractEvent<
      ChallengeEvent.InputTuple,
      ChallengeEvent.OutputTuple,
      ChallengeEvent.OutputObject
    >;

    "Deposit(address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "RollupBlockSubmitted(uint256,bytes32,bytes32,address)": TypedContractEvent<
      RollupBlockSubmittedEvent.InputTuple,
      RollupBlockSubmittedEvent.OutputTuple,
      RollupBlockSubmittedEvent.OutputObject
    >;
    RollupBlockSubmitted: TypedContractEvent<
      RollupBlockSubmittedEvent.InputTuple,
      RollupBlockSubmittedEvent.OutputTuple,
      RollupBlockSubmittedEvent.OutputObject
    >;

    "WithdrawalProcessed(address,uint256)": TypedContractEvent<
      WithdrawalProcessedEvent.InputTuple,
      WithdrawalProcessedEvent.OutputTuple,
      WithdrawalProcessedEvent.OutputObject
    >;
    WithdrawalProcessed: TypedContractEvent<
      WithdrawalProcessedEvent.InputTuple,
      WithdrawalProcessedEvent.OutputTuple,
      WithdrawalProcessedEvent.OutputObject
    >;

    "WithdrawalRequested(address,uint256,bytes32)": TypedContractEvent<
      WithdrawalRequestedEvent.InputTuple,
      WithdrawalRequestedEvent.OutputTuple,
      WithdrawalRequestedEvent.OutputObject
    >;
    WithdrawalRequested: TypedContractEvent<
      WithdrawalRequestedEvent.InputTuple,
      WithdrawalRequestedEvent.OutputTuple,
      WithdrawalRequestedEvent.OutputObject
    >;
  };
}
